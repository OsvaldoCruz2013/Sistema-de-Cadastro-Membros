require("dotenv").config();const express=require("express"),cors=require("cors"),{Pool:Pool}=require("pg"),bcrypt=require("bcrypt"),path=require("path"),app=express();app.use(cors()),app.use(express.json()),app.use(express.static(path.join(__dirname,"../frontend")));const pool=new Pool({host:process.env.DB_HOST,port:process.env.DB_PORT,user:process.env.DB_USER,password:process.env.DB_PASS,database:process.env.DB_NAME,ssl:{rejectUnauthorized:!1}}),colunasDimensoes={genero:"genero",status:"status",cargo:"cargo",estadocivil:"estadocivil",congregacao:"nome_congregacao"},getId=async(o,e)=>{const r=colunasDimensoes[o];if(!r)throw new Error(`Coluna de busca não definida para ${o}`);const s=await pool.query(`SELECT id_${o} FROM dim_${o} WHERE LOWER(${r}) = LOWER($1)`,[e]);if(0===s.rows.length)throw new Error(`Valor "${e}" não encontrado em dim_${o}`);return s.rows[0][`id_${o}`]};app.post("/api/login",async(o,e)=>{const{usuario:r,senha:s}=o.body;try{const o=await pool.query("SELECT * FROM usuarios WHERE usuario = $1",[r]);if(0===o.rows.length)return e.status(401).send("Usuário não encontrado");const a=o.rows[0];if(!await bcrypt.compare(s,a.senha))return e.status(401).send("Senha incorreta");e.send({mensagem:"Login bem-sucedido"})}catch(o){console.error("Erro durante login:",o),e.status(500).send("Erro no servidor")}}),app.post("/api/membros",async(o,e)=>{const r=o.body;try{const o=await getId("genero",r.genero),s=await getId("status",r.status),a=await getId("cargo",r.cargo),n=await getId("estadocivil",r.estadocivil),t=await getId("congregacao",r.congregacao),c="\n      INSERT INTO fato_membros \n      (nome, cpf, rg, endereco, numero, bairro, telefone, email, observacao,\n       id_genero, id_status, id_cargo, id_estadocivil, id_congregacao)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n    ",i=[r.nome,r.cpf,r.rg,r.endereco,r.numero,r.bairro,r.telefone,r.email,r.observacao,o,s,a,n,t];await pool.query(c,i),e.send("Membro salvo com sucesso")}catch(o){console.error("Erro detalhado ao salvar membro:",o),e.status(500).send("Erro ao salvar membro")}}),app.get("/api/membros",async(o,e)=>{try{const o=await pool.query("SELECT * FROM fato_membros ORDER BY id_fato DESC");e.json(o.rows)}catch(o){e.status(500).send("Erro ao buscar membros")}}),app.get("/",(o,e)=>{e.sendFile(path.join(__dirname,"../frontend/login.html"))}),app.listen(3e3,()=>{console.log("Servidor rodando em http://localhost:3000")});